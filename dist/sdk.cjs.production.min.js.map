{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xc12A7e093832E2d2267df225BAca60bD2B74C65F'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA, ZERO_ADDRESS } from './constants'\n\nexport function isETH(address: string): boolean {\n  return address === ZERO_ADDRESS\n}\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ChainId, ZERO_ADDRESS } from '../constants'\nimport { isETH, validateAndParseAddress } from '../utils'\nimport invariant from 'tiny-invariant';\n\n/**\n * Represents an ERC20 token and Ether with a unique address and some metadata.\n */\nexport class Token {\n    public readonly chainId: ChainId\n    public readonly address: string\n    public readonly isEther: boolean\n    public readonly decimals: number\n    public readonly symbol: string | undefined\n    public readonly name: string | undefined\n\n    public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n        this.chainId = chainId\n        this.address = validateAndParseAddress(address)\n        this.isEther = isETH(address)\n        this.decimals = decimals\n        this.symbol = symbol\n        this.name = name\n    }\n\n    /**\n     * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n     * @param other other token to compare\n     */\n    public equals(other: Token): boolean {\n        // short circuit on reference equality\n        if (this === other) {\n            return true\n        }\n        return this.chainId === other.chainId && this.address === other.address\n    }\n\n\n    /**\n     * Returns true if the address of this token sorts before the address of the other token\n     * @param other other token to compare\n     * @throws if the tokens have the same address\n     * @throws if the tokens are on different chains\n     */\n    public sortsBefore(other: Token): boolean {\n        invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n        invariant(this.address !== other.address, 'ADDRESSES')\n        return this.address.toLowerCase() < other.address.toLowerCase()\n    }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Token, currencyB: Token): boolean {\n    return currencyA?.address?.toLowerCase() === currencyB?.address?.toLowerCase()\n}\n\nexport const ETHER = new Token(ChainId.MAINNET, ZERO_ADDRESS, 18, 'ETH', 'Ethereum')\n\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { BigintIsh, Rounding, SolidityType, TEN } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils';\nimport { Fraction } from './fraction';\nimport toFormat from 'toformat'\nimport _Big from 'big.js'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n      significantDigits: number = 6,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n      decimalPlaces: number = this.token.decimals,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n\n","import { currencyEquals, Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\n\nexport class Price extends Fraction {\n    public readonly baseCurrency: Token // input i.e. denominator\n    public readonly quoteCurrency: Token // output i.e. numerator\n    public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n    public static fromRoute(route: Route): Price {\n        const prices: Price[] = []\n        for (const [i, pair] of route.pairs.entries()) {\n            prices.push(\n                route.path[i].equals(pair.token0)\n                    ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n                    : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n            )\n        }\n        return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    }\n\n    // denominator and numerator _must_ be raw, i.e. in the native representation\n    public constructor(baseCurrency: Token, quoteCurrency: Token, denominator: BigintIsh, numerator: BigintIsh) {\n        super(numerator, denominator)\n\n        this.baseCurrency = baseCurrency\n        this.quoteCurrency = quoteCurrency\n        this.scalar = new Fraction(\n            JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n            JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n        )\n    }\n\n    public get raw(): Fraction {\n        return new Fraction(this.numerator, this.denominator)\n    }\n\n    public get adjusted(): Fraction {\n        return super.multiply(this.scalar)\n    }\n\n    public invert(): Price {\n        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n    }\n\n    public multiply(other: Price): Price {\n        invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n        const fraction = super.multiply(other)\n        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n    }\n\n    // performs floor division on overflow\n    public quote(currencyAmount: TokenAmount): TokenAmount {\n        invariant(currencyEquals(currencyAmount.token, this.baseCurrency), 'TOKEN')\n        return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n\n    public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n        return this.adjusted.toSignificant(significantDigits, format, rounding)\n    }\n\n    public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n        return this.adjusted.toFixed(decimalPlaces, format, rounding)\n    }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { _1000, _997, BigintIsh, ChainId, FIVE, ONE, ZERO } from '../constants'\nimport { parseBigintIsh, sqrt } from '../utils'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\nimport { Token } from './token'\n\n\nexport class Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [TokenAmount, TokenAmount]\n    public readonly poolAddress: string\n\n    // need to provide already sorted tokens\n    public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, poolAddress: string) {\n        const [amount0, amount1] = tokenAmountA.token.sortsBefore(tokenAmountB.token)\n            ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.liquidityToken = new Token(\n            amount0.token.chainId,\n            poolAddress,\n            18,\n            'PEGASUS-V1-' + amount0.token.symbol + '-' + amount1.token.symbol,\n            'PegasusSwap V1 (' + amount0.token.symbol + '-' + amount1.token.symbol + ')'\n        )\n        this.tokenAmounts = [amount0, amount1]\n        this.poolAddress = poolAddress\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n     */\n    public get token0Price(): Price {\n        return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n    public get token1Price(): Price {\n        return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceOf(token: Token): Price {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    // todo: add virtual balances\n    public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n        const outputAmount = new TokenAmount(\n            inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.raw, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.poolAddress)]\n    }\n\n    // todo: add virtual balances\n    public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.raw, ZERO) ||\n            JSBI.equal(this.reserve1.raw, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n        const inputAmount = new TokenAmount(\n            outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.poolAddress)]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: TokenAmount,\n        tokenAmountA: TokenAmount,\n        tokenAmountB: TokenAmount\n    ): TokenAmount {\n        invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = [tokenAmountA, tokenAmountB]\n        invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.raw, ZERO)) {\n            liquidity = JSBI.greaterThan(tokenAmounts[0].raw, tokenAmounts[1].raw)\n                ? JSBI.BigInt(tokenAmounts[0].raw)\n                : JSBI.BigInt(tokenAmounts[1].raw)\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return new TokenAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: TokenAmount,\n        liquidity: TokenAmount,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: TokenAmount\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = parseBigintIsh(kLast)\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return new TokenAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n        )\n    }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Token\n  public readonly output: Token\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Token, output?: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.token, b.inputAmount.token), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.token, b.outputAmount.token), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: TokenAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: TokenAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: TokenAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.token, route.input), 'INPUT')\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.token, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : amounts[0]\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.token,\n      this.outputAmount.token,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param TokenAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the TokenAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    TokenAmountIn: TokenAmount,\n    currencyOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = TokenAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === TokenAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined = TokenAmountIn.token.chainId\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = TokenAmountIn\n    const tokenOut = currencyOut\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param TokenAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the TokenAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Token,\n    TokenAmountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = TokenAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === TokenAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      TokenAmountOut instanceof TokenAmount\n        ? TokenAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = TokenAmountOut\n    const tokenIn = currencyIn\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.token),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport MooniswapFactoryABI from './abis/MooniswapFactory.json'\nimport MooniswapABI from './abis/Mooniswap.json'\nimport invariant from 'tiny-invariant'\nimport ERC20ABI from './abis/ERC20.json'\nimport { ChainId, FACTORY_ADDRESS } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n    [ChainId.MAINNET]: {\n        '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n    }\n}\n\nconst POOLS_CACHE: { [chainId: number]: { [token0: string]: { [token1: string]: string } } } = {\n    [ChainId.MAINNET]: {}\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n    }\n\n    /**\n     * Fetch information for a given token on the given chain, using the given ethers provider.\n     * @param chainId chain of the token\n     * @param address address of the token on the chain\n     * @param provider provider used to fetch the token\n     * @param symbol optional symbol of the token\n     * @param name optional name of the token\n     */\n    public static async fetchTokenData(\n        chainId: ChainId,\n        address: string,\n        provider = getDefaultProvider(getNetwork(chainId)),\n        symbol?: string,\n        name?: string\n    ): Promise<Token> {\n        const parsedDecimals =\n            typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n                ? TOKEN_DECIMALS_CACHE[chainId][address]\n                : await new Contract(address, ERC20ABI, provider).decimals().then((decimals: number): number => {\n                    TOKEN_DECIMALS_CACHE = {\n                        ...TOKEN_DECIMALS_CACHE,\n                        [chainId]: {\n                            ...TOKEN_DECIMALS_CACHE?.[chainId],\n                            [address]: decimals\n                        }\n                    }\n                    return decimals\n                })\n        return new Token(chainId, address, parsedDecimals, symbol, name)\n    }\n\n    /**\n     * Fetches information about a pair and constructs a pair from the given two tokens.\n     * @param tokenA first token\n     * @param tokenB second token\n     * @param provider the provider to use to fetch the data\n     */\n    public static async fetchPairData(\n        tokenA: Token,\n        tokenB: Token,\n        provider = getDefaultProvider(getNetwork(tokenA.chainId))\n    ): Promise<Pair> {\n        invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n\n        let poolAddress: string;\n        if (!POOLS_CACHE[tokenA.chainId]) {\n            POOLS_CACHE[tokenA.chainId] = {};\n        }\n        if (!POOLS_CACHE[tokenA.chainId][tokenA.address]) {\n            POOLS_CACHE[tokenA.chainId][tokenA.address] = {}\n        }\n\n        if (POOLS_CACHE[tokenA.chainId][tokenA.address][tokenB.address]) {\n            poolAddress = POOLS_CACHE[tokenA.chainId][tokenA.address][tokenB.address]\n        } else {\n            poolAddress = await new Contract(FACTORY_ADDRESS, MooniswapFactoryABI, provider).pools(\n                tokenA.address,\n                tokenB.address\n            )\n            POOLS_CACHE[tokenA.chainId][tokenA.address][tokenB.address] = poolAddress\n            POOLS_CACHE[tokenA.chainId][tokenB.address][tokenA.address] = poolAddress\n        }\n\n        const poolContract = new Contract(poolAddress, MooniswapABI, provider);\n        const tokenAddresses = await Promise.all([\n            poolContract.tokens(0),\n            poolContract.tokens(1)\n        ])\n        const tokens = tokenA.address === tokenAddresses[0] ? [tokenA, tokenB] : [tokenB, tokenA]\n        const balances = await Promise.all([\n            new Contract(tokenAddresses[0], ERC20ABI, provider).balanceOf(poolAddress),\n            new Contract(tokenAddresses[1], ERC20ABI, provider).balanceOf(poolAddress)\n        ])\n        return new Pair(new TokenAmount(tokens[0], balances[0]), new TokenAmount(tokens[1], balances[1]), poolAddress)\n    }\n}\n"],"names":["TradeType","ZERO_ADDRESS","MINIMUM_LIQUIDITY","JSBI","ZERO","BigInt","ONE","TWO","_1000","SolidityType","CAN_SET_PROTOTYPE","Object","name","InsufficientInputAmountError","SOLIDITY_TYPE_MAXIMA","uint256","z","length","comparator","items","add","sortsBefore","this","Decimal","ROUND_UP","equal","numerator","other","Fraction","otherParsed","multiply","denominator","token","invariant","Price","scalar","exponentiate","TEN","quoteCurrency","prices","route","pairs","entries","pair","push","path","token0","raw","involvesToken","inputAmount","reserve1","TokenAmount","divide","outputAmount","InsufficientReservesError","amount0","tokenAmounts","totalSupply","reserve0","every","_100_PERCENT","toSignificant","currencyEquals","a","amount","i","amountIn","EXACT_INPUT","slippageAdjustedAmountOut","slippageTolerance","tradeType","currentPairs","originalAmountIn","maxHops","TokenAmountIn","Route","TOKEN_DECIMALS_CACHE","fetchTokenData","getNetwork","chainId","tokenA","POOLS_CACHE","address"],"mappings":"kJAaqBA,6dAAAA,EAAAA,oBAAAA,wOAkBRC,+CAEAC,EAAoBC,cAGpBC,EAAOD,EAAKE,OAAO,GACnBC,IAAWD,OAAO,GAClBE,2EAEDJ,SAAY,KAKXK,WAAoB,kBAGhCC,EAAA,MAAA,2rFC/CD,IAAMC,EAAoB,mBAAoBC,yHAYEC,uHAYvCC,4UCR+BC,4GAmBlCX,8DAMwBM,EAAYM,uFAKdC,2GAeV,uEAUPC,iBAGCC,wEAOgB,IACXC,KAAYC,+SC7BlBC,YAAA,mDAGOC,0UC5CZC,kQAiBEC,mQA8CUC,mEACyCC,qCAO3CN,IACZjB,yCACAA,uBACqBmB,oFAaoBK,8BACeC,eACxDzB,QAAWmB,+NAoBmBO,8CAMdF,aAAiBC,oCAGrBE,cACSJ,UACJG,2CAGuBE,80CAnFjCH,6BAEeN,uBAAwBS,sKC3BrCC,kMAwBXC,MAEc,iBAAoC9B,8kBC1BvC+B,6GAsBOC,gBACHC,oDACaC,IAAUhC,OAAMiC,mCAtC5B,sBACJC,SACkBC,EAAMC,MAAMC,0BAAW,eAAhCC,OACXJ,EAAOK,KAECJ,EAAMK,oBAAoBC,QACpB,MAAUH,iBAAqBA,iBAAqBA,eAAmBA,WAAcI,ozBAsC9ErB,yhBCoBdM,+HAqCGV,KAAC0B,cAAchB,IAD7BC,4BAEuCX,wDAMpB2B,mCACnBhB,4BACgCc,gBAA0BzB,KAAC4B,aAAkB9C,qBAMpDkB,sHAQHnB,eAA+C4C,KAC/DhB,UAA4BD,uBACT,IAAAqB,GAErBF,oDACI9C,EAACiD,SAAkBrB,OAEnB5B,EAACsB,MAAM4B,MAAsBjD,SACvB,IAAAS,4FAMJS,6BAAVW,gIAaU,IAAIqB,mPASVnD,MAASA,yBAEL8C,4NAWGxB,iGAKJ8B,EAAApD,EAAAiD,OAAAjD,EAAA2B,SAAA0B,EAAA,GAAAT,IAAAU,EAAAV,KAAAzB,KAAAoC,SAAAX,q0CC7JQ,WAGfY,OAAM,SAAAhB,UAAQA,ggBCjChBiB,uKAKUtC,kBAA6CuC,8GAHpCjC,8ECsCnBkC,wNAeM,4BAO2BC,YAC3B,oTA6HGC,gBACOxB,oBAA4B,6DAGtCyB,2VAmBIhB,2DAOZF,sBAGgBA,mOAnDgCmB,wEAQnC1B,sBACgBxC,oJAsDFmE,yCAGzBC,0IAUaC,gCAWZC,8MA0CHC,EACAC,oGADAD,IAAAA,eACAC,IAAAA,0CAOMC,EACJ,SACID,IAAqBE,8BACMA,6CAMjBjC,sBACCwB,uBAEGC,gEACgBhB,6JAclC,IAAIyB,qGAqBqBlC,k2UC3V3BmC,2KAqCwBC,gRAUJ,unBA+BcC,eAAkBC,2CAM/BC,EAAOD,WACpBE,GAAYD,EAAOD,6CAGAA,uHXvEA,oMW2E8BG,uKX3E9B"}